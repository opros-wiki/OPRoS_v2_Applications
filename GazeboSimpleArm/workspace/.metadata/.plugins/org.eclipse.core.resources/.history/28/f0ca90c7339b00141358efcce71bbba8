#pragma once

#include <pthread.h>

#include "Manipulator.h"

class GazeboSimpleArm : public Manipulator
{
public:
	GazeboSimpleArm(void);
	virtual ~GazeboSimpleArm(void);

private:
	OPRoS::Property _props;
	size_t _numberOfJoints;

	pthread_mutex_t _mutex;
	std::vector<double> _actualTorque;
	std::vector<double> _actualVelocity;
	std::vector<double> _actualPosition;

public:
	int32_t Initialize(OPRoS::Property props);
	int32_t Finalize(void);
	int32_t Enable(void);
	int32_t Disable(void);
	int32_t SetProperty(OPRoS::Property props);
	int32_t GetProperty(OPRoS::Property &props);

	int32_t RunHoming(void);

	int32_t SetTorque(std::vector<OPRoS::Float64> torque);
	int32_t GetTorque(std::vector<OPRoS::Float64> &torque);
	int32_t GetVelocity(std::vector<OPRoS::Float64> &velocity);
	int32_t GetPosition(std::vector<OPRoS::Float64> &position);

	void UpdateJointInfo(std::vector<double> &actualTorque, std::vector<double> &actualVelocity, std::vector<double> &actualPosition);
};
