/*
 *  Generated sources by OPRoS Component Generator (OCG V2.1 [Symbol,Topic])
 *  
 */
#include <Component.h>
#include <InputDataPort.h>
#include <OutputDataPort.h>
#include <InputEventPort.h>
#include <OutputEventPort.h>
#include <OPRoSTypes.h>
#include <EventData.h>
#include <ServiceUtils.h>

#include "ManipulatorComp.h"
#include "OprosPrintMessage.h"

//
// constructor declaration
//
ManipulatorComp::ManipulatorComp()
{
	hOprosAPI = NULL;
	manipulator = NULL;
	lastError = OPROS_SUCCESS;
	
	portSetup();
}

//
// constructor declaration (with name)
//
ManipulatorComp::ManipulatorComp(const std::string &name):Component(name)
{
	hOprosAPI = NULL;
	manipulator = NULL;
	lastError = OPROS_SUCCESS;
	
	portSetup();
}

//
// destructor declaration
//

ManipulatorComp::~ManipulatorComp()
{
	onDestroy();
}

ReturnType ManipulatorComp::SetProperty(OPRoS::Property props)
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	if(manipulator->SetProperty(props) < 0) {
		return lastError = OPROS_CALL_API_ERROR;
	}

	return lastError = OPROS_SUCCESS;
}

OPRoS::Property ManipulatorComp::GetProperty()
{
	OPRoS::Property props;

	if(manipulator == NULL) {
		props.status = lastError = OPROS_PRECONDITION_NOT_MET;
		return props;
	}

	if(manipulator->GetProperty(props) < 0) {
		props.status = OPROS_CALL_API_ERROR;
		lastError = OPROS_CALL_API_ERROR;
	}

	return props;
}

ReturnType ManipulatorComp::GetError()
{
	return lastError;
}

ReturnType ManipulatorComp::Enable()
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	long ret = manipulator->Enable();
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return lastError;
}

ReturnType ManipulatorComp::Disable()
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	long ret = manipulator->Disable();
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return lastError;
}

ReturnType ManipulatorComp::RunHoming()
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	long ret = manipulator->RunHoming();
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return lastError;
}

ReturnType ManipulatorComp::SetTorque(std::vector<OPRoS::Float64> torque)
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	long ret = manipulator->SetTorque(torque);
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return lastError;
}

std::vector<OPRoS::Float64> ManipulatorComp::GetTorque()
{
	std::vector<OPRoS::Float64> torque;

	if(manipulator == NULL) {
		lastError = OPROS_PRECONDITION_NOT_MET;
		return torque;
	}

	long ret = manipulator->GetTorque(torque);
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return torque;
}

ReturnType ManipulatorComp::SetVelocity(std::vector<OPRoS::Float64> velocity)
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	long ret = manipulator->SetVelocity(velocity);
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return lastError;
}

std::vector<OPRoS::Float64> ManipulatorComp::GetVelocity()
{
	std::vector<OPRoS::Float64> velocity;

	if(manipulator == NULL) {
		lastError = OPROS_PRECONDITION_NOT_MET;
		return velocity;
	}

	long ret = manipulator->GetVelocity(velocity);
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return velocity;
}

ReturnType ManipulatorComp::SetPosition(std::vector<OPRoS::Float64> position, std::vector<OPRoS::UInt32> time)
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	long ret = manipulator->SetPosition(position, time);
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return lastError;
}

std::vector<OPRoS::Float64> ManipulatorComp::GetPosition()
{
	std::vector<OPRoS::Float64> position;

	if(manipulator == NULL) {
		lastError = OPROS_PRECONDITION_NOT_MET;
		return position;
	}

	long ret = manipulator->GetPosition(position);
	if(ret == API_SUCCESS) {
		lastError = OPROS_SUCCESS;
	}
	else if(ret == API_NOT_SUPPORTED) {
		lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		lastError = OPROS_API_EXECUTING;
	}
	else {
		lastError = OPROS_CALL_API_ERROR;
	}

	return position;
}

void ManipulatorComp::portSetup() {
	ProvidedServicePort *pa1;
	pa1=new ManipulatorServiceProvided(this);
	addPort("ManipulatorService",pa1);
	// export variable setup
}

// Call back Declaration
ReturnType ManipulatorComp::onInitialize()
{
	PrintMessage("Info : ManipulatorComp::onInitialize() -> Start\n");

	OPRoS::Property props;
	std::map<std::string, std::string> temp = getPropertyMap();
	props.SetProperty(temp);

	if(props.FindName("ApiName") == false) {
		PrintMessage("ERROR : ManipulatorComp::onInitialize() -> Can't find the ApiName in property\n");
		return lastError = OPROS_FIND_PROPERTY_ERROR;
	}

#if defined(WIN32)
	hOprosAPI = LoadLibrary((LPCSTR)props.GetValue("ApiName").c_str());
	if(hOprosAPI == NULL) {
		PrintMessage("ERROR : ManipulatorComp::onInitialize() -> Can't find the %s\n", props.GetValue("ApiName").c_str());
		return lastError = OPROS_FIND_DLL_ERROR;
	}

	GET_OPROS_DEVICE getOprosAPI;
	getOprosAPI = (GET_OPROS_DEVICE)GetProcAddress(hOprosAPI, "GetAPI");
	if(getOprosAPI == NULL) {
		PrintMessage("ERROR : ManipulatorComp::onInitialize() -> Can't get a handle of GetAPI Funtion\n");
		FreeLibrary(hOprosAPI);
		hOprosAPI = NULL;
		return lastError = OPROS_LOAD_DLL_ERROR;
	}
#else
	hOprosAPI = dlopen(props.GetValue("ApiName").c_str(), RTLD_NOW);
	if(hOprosAPI == NULL) {
		PrintMessage("ERROR : ManipulatorComp::onInitialize() -> Can't find the %s\n", props.GetValue("ApiName").c_str());
		return lastError = OPROS_FIND_DLL_ERROR;
	}

	GET_OPROS_DEVICE getOprosAPI;
	getOprosAPI = (GET_OPROS_DEVICE)dlsym(hOprosAPI, "GetAPI");
	char *error = dlerror();
	if(error != NULL) {
		PrintMessage("ERROR : ManipulatorComp::onInitialize() -> Can't get a handle of GetAPI Function\n");
		dlclose(hOprosAPI);
		hOprosAPI = NULL;
		return lastError = OPROS_LOAD_DLL_ERROR;
	}
#endif

	manipulator = dynamic_cast<Manipulator *>(getOprosAPI());
	if(manipulator == NULL) {
		PrintMessage("ERROR : ManipulatorComp::onInitialize() -> Can't get a handle of Manipulator API\n");
#if defined(WIN32)
		FreeLibrary(hOprosAPI);
#else
		dlclose(hOprosAPI);
#endif
		hOprosAPI = NULL;
		return lastError = OPROS_LOAD_DLL_ERROR;
	}

	if(manipulator->Initialize(props) != API_SUCCESS) {
		PrintMessage("ERROR : ManipulatorComp::onInitialize() -> Can't initialize a Manipulator API\n");

		delete manipulator;
		manipulator = NULL;

#if defined(WIN32)
		FreeLibrary(hOprosAPI);
#else
		dlclose(hOprosAPI);
#endif
		hOprosAPI = NULL;
		return lastError = OPROS_INITIALIZE_API_ERROR;
	}

	return lastError = OPROS_SUCCESS;
}

ReturnType ManipulatorComp::onStart()
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	long ret = manipulator->Enable();
	if(ret == API_NOT_SUPPORTED) {
		return lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		return lastError = OPROS_API_EXECUTING;
	}
	else if(ret == API_ERROR) {
		return lastError = OPROS_ENABLE_API_ERROR;
	}

	ret = manipulator->RunHoming();
	if(ret == API_ERROR) {
		return lastError = OPROS_CALL_API_ERROR;
	}
	else if(ret == API_NOT_SUPPORTED) {
		return lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		return lastError = OPROS_API_EXECUTING;
	}

	return lastError = OPROS_SUCCESS;
}
	
ReturnType ManipulatorComp::onStop()
{
	if(manipulator == NULL) {
		return lastError = OPROS_PRECONDITION_NOT_MET;
	}

	long ret = manipulator->Enable();
	if(ret == API_NOT_SUPPORTED) {
		return lastError = OPROS_API_NOT_SUPPORTED_ERROR;
	}
	else if(ret == API_EXECUTING) {
		return lastError = OPROS_API_EXECUTING;
	}
	else if(ret == API_ERROR) {
		return lastError = OPROS_ENABLE_API_ERROR;
	}

	return lastError = OPROS_SUCCESS;
}

ReturnType ManipulatorComp::onReset()
{
	// user code here
	return lastError = OPROS_SUCCESS;
}

ReturnType ManipulatorComp::onError()
{
	// user code here
	return lastError = OPROS_SUCCESS;
}

ReturnType ManipulatorComp::onRecover()
{
	// user code here
	return lastError = OPROS_SUCCESS;
}

ReturnType ManipulatorComp::onDestroy()
{
	if(manipulator != NULL) {
		manipulator->Finalize();
		delete manipulator;
		manipulator = NULL;
	}

	if(hOprosAPI != NULL) {
#if defined(WIN32)
		FreeLibrary(hOprosAPI);
#else
		dlclose(hOprosAPI);
#endif
		hOprosAPI = NULL;
	}

	return lastError = OPROS_SUCCESS;
}

ReturnType ManipulatorComp::onEvent(Event *evt)
{
	// user code here
	return OPROS_SUCCESS;
}

ReturnType ManipulatorComp::onExecute()
{
	// user code here
	return OPROS_SUCCESS;
}
	
ReturnType ManipulatorComp::onUpdated()
{
	// user code here
	return OPROS_SUCCESS;
}

ReturnType ManipulatorComp::onPeriodChanged()
{
	// user code here
	return OPROS_SUCCESS;
}

#ifndef MAKE_STATIC_COMPONENT
#ifdef WIN32

extern "C"
{
__declspec(dllexport) Component *getComponent();
__declspec(dllexport) void releaseComponent(Component *pcom);
}

Component *getComponent()
{
	return new ManipulatorComp();
}

void releaseComponent(Component *com)
{
	delete com;
}

#else
extern "C"
{
	Component *getComponent();
	void releaseComponent(Component *com);
}
Component *getComponent()
{
	return new ManipulatorComp();
}

void releaseComponent(Component *com)
{
	delete com;
}
#endif
#endif
