
/*
 *  Generated sources by OPRoS Component Generator (OCG V2.1 [Symbol,Topic])
 *  
 */

#include <OPRoSInclude.h>
#include "JointSpaceControlTestComp.h"

//
// constructor declaration
//
JointSpaceControlTestComp::JointSpaceControlTestComp()
{
	ptrJointSpaceControlCoordinatorService = NULL;

	portSetup();
}

//
// constructor declaration (with name)
//
JointSpaceControlTestComp::JointSpaceControlTestComp(const std::string &name):Component(name)
{
	ptrJointSpaceControlCoordinatorService = NULL;

	portSetup();
}

//
// destructor declaration
//

JointSpaceControlTestComp::~JointSpaceControlTestComp()
{

}

void JointSpaceControlTestComp::portSetup()
{
	ptrJointSpaceControlCoordinatorService=new JointSpaceControlCoorinatorServiceRequired();
	addPort("JointSpaceControlCoordinatorService",ptrJointSpaceControlCoordinatorService);
}

// Call back Declaration
ReturnType JointSpaceControlTestComp::onInitialize()
{
	return OPROS_SUCCESS;
}

ReturnType JointSpaceControlTestComp::onStart()
{
	/* these are macros that pull useful data out of the display object */
	/* we use these bits of info enough to want them in their own variables */
	screen_num = DefaultScreen(dpy);
	background = BlackPixel(dpy, screen_num);
	border = WhitePixel(dpy, screen_num);

	width = 300; /* start with a small window */
	height = 300;

	win = XCreateSimpleWindow(dpy, DefaultRootWindow(dpy), /* display, parent */
		100, 100, /* x, y: the window manager will place the window elsewhere */
		width, height, /* width, height */
		2, border, /* border width & colour, unless you have a window manager */
		background); /* background colour */

	/* tell the display server what kind of events we would like to see */
	XSelectInput(dpy, win, ButtonPressMask|StructureNotifyMask );

	/* okay, put the window on the screen, please */
	XMapWindow(dpy, win);

	return OPROS_SUCCESS;
}
	
ReturnType JointSpaceControlTestComp::onStop()
{
	XCloseDisplay(dpy);

	return OPROS_SUCCESS;
}

ReturnType JointSpaceControlTestComp::onReset()
{
	// user code here
	return OPROS_SUCCESS;
}

ReturnType JointSpaceControlTestComp::onError()
{
	// user code here
	return OPROS_SUCCESS;
}

ReturnType JointSpaceControlTestComp::onRecover()
{
	// user code here
	return OPROS_SUCCESS;
}

ReturnType JointSpaceControlTestComp::onDestroy()
{
	// user code here
	return OPROS_SUCCESS;
}

ReturnType JointSpaceControlTestComp::onEvent(Event *evt)
{
	// user code here
	return OPROS_SUCCESS;
}

ReturnType JointSpaceControlTestComp::onExecute()
{
	XNextEvent(dpy, &ev);
	switch(ev.type){
		case ConfigureNotify:
			if (width != ev.xconfigure.width || height != ev.xconfigure.height) {
				width = ev.xconfigure.width;
				height = ev.xconfigure.height;
				printf("Size changed to: %d by %d\n", width, height);
			}
			break;
		case ButtonPress:
			//XCloseDisplay(dpy);
			break;

		default :
			break;
	}

	return OPROS_SUCCESS;
}
	
ReturnType JointSpaceControlTestComp::onUpdated()
{
	// user code here
	return OPROS_SUCCESS;
}

ReturnType JointSpaceControlTestComp::onPeriodChanged()
{
	// user code here
	return OPROS_SUCCESS;
}

#ifndef MAKE_STATIC_COMPONENT
#ifdef WIN32

extern "C"
{
__declspec(dllexport) Component *getComponent();
__declspec(dllexport) void releaseComponent(Component *pcom);
}

Component *getComponent()
{
	return new JointSpaceControlTestComp();
}

void releaseComponent(Component *com)
{
	delete com;
}

#else
extern "C"
{
	Component *getComponent();
	void releaseComponent(Component *com);
}
Component *getComponent()
{
	return new JointSpaceControlTestComp();
}

void releaseComponent(Component *com)
{
	delete com;
}
#endif
#endif

